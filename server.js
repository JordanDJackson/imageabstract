 /******************************************************
 * PLEASE DO NOT EDIT THIS FILE
 * the verification process may break
 * ***************************************************/

'use strict';

var fs = require('fs');
var express = require('express');
var app = express();
var mongodb = require('mongodb');
var MongoClient = mongodb.MongoClient;
var bodyParser = require("body-parser");
var request = require("request");
var monuri = process.env.MONGOLAB_URI
var apikey = process.env.APIKEY;
var eid = process.env.ENGINE_ID;
var moment = require("moment");

if (!process.env.DISABLE_XORIGIN) {
  app.use(function(req, res, next) {
    var allowedOrigins = ['https://narrow-plane.gomix.me', 'https://www.freecodecamp.com'];
    var origin = req.headers.origin || '*';
    if(!process.env.XORIG_RESTRICT || allowedOrigins.indexOf(origin) > -1){
         console.log(origin);
         res.setHeader('Access-Control-Allow-Origin', origin);
         res.header("Access-Control-Allow-Headers", "Origin, X-Requested-With, Content-Type, Accept");
    }
    next();
  });
}
var db;
MongoClient.connect(monuri, (err, database) => {
  if(err) throw err;
  db = database.collection("recsea");  
  console.log("Database connected")
 
})
app.use('/public', express.static(process.cwd() + '/public'));
app.set('json spaces', 2);
app.route('/_api/package.json')
  .get(function(req, res, next) {
    console.log('requested');
    fs.readFile(__dirname + '/package.json', function(err, data) {
      if(err) return next(err);
      res.type('txt').send(data.toString());
    });
  });
app.route('/')
    .get(function(req, res) {
		  res.sendFile(process.cwd() + '/views/index.html');
    })
app.route("/api/imagesearch/:string")
    .get( (req,res) => {
      var r = req.params.string;  
      var now = moment()
      var date = now.format('YYYY-MM-DD HH:mm:ss') + "Z"
      db.insert(
        {"Term":r,
         "When": date
        });
      var page = Number(req.query.offset);
      if(page <= 0 || isNaN(page)) {
        page = 1;
      }
      page = page + (9 * (page-1));  
    var reqUrl = 'https://www.googleapis.com/customsearch/v1?key='+ apikey +'&cx=' + eid + '&q=' + r + '&prettyPrint=true' + '&searchType = image' + '&start=' + page ;
    request(reqUrl, (error, response, body) => {
      if(error) {throw error};
      var reqbody = JSON.parse(body);

      let album = [];
      var numOfResults = JSON.parse(reqbody.items.length);
      for(let i = 0; i < numOfResults ; i++) {
        let picUrl; 
        
        
        try {
          picUrl = reqbody.items[i]["pagemap"]["cse_image"][0]["src"];
        } catch(e) {
          picUrl = "No direct image link provided";
        }
        
        
        
        album[i] = {
          "url":picUrl,
          "snippet":reqbody.items[i]["snippet"],
          "context":reqbody.items[i]["link"]
        } 
        
 
      }     
     
      res.send(album);
      
    })
  
})

app.route("/api/lastest/imagesearch")
    .get( (req,res) => {
      db.find().sort({When: -1}).limit(10).toArray( (err,docs) => {
          res.send(docs);
      });    
})

// Respond not found to all the wrong routes
app.use(function(req, res, next){
  res.status(404);
  res.type('txt').send('Not found');
});

// Error Middleware
app.use(function(err, req, res, next) {
  if(err) {
    res.status(err.status || 500)
      .type('txt')
      .send(err.message || 'SERVER ERROR');
  }  
})

app.listen(process.env.PORT, function () {
  console.log('Node.js listening ...');
});

